# 프로덕션 환경용 Docker Compose
version: '3.8'

services:
  # 프론트엔드 Next.js 서비스
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - smart-farm-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 백엔드 Flask 서비스  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
      - UPLOAD_FOLDER=/app/uploads
      - PYTHONPATH=/app
      - WORKERS=4
      - TIMEOUT=300
    volumes:
      - backend_uploads:/app/uploads
      - backend_models:/app/models
      - backend_logs:/app/logs
    restart: unless-stopped
    networks:
      - smart-farm-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis (캐싱 및 세션 관리)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - smart-farm-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - smart-farm-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 모니터링 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - smart-farm-network
    deploy:
      resources:
        limits:
          memory: 512M

  # 모니터링 - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./monitoring/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./monitoring/grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json:ro
    restart: unless-stopped
    networks:
      - smart-farm-network
    deploy:
      resources:
        limits:
          memory: 512M

networks:
  smart-farm-network:
    driver: bridge

volumes:
  backend_uploads:
    driver: local
  backend_models:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 